package com.klef.jfsd.erp.controller;

import com.klef.jfsd.erp.DTO.CourseMappingDTO;
import com.klef.jfsd.erp.DTO.CourseMappingFac;
import com.klef.jfsd.erp.DTO.LoginRequest;
import com.klef.jfsd.erp.model.Admin;
import com.klef.jfsd.erp.model.Course;
import com.klef.jfsd.erp.model.Faculty;
import com.klef.jfsd.erp.model.Student;
import com.klef.jfsd.erp.service.AdminService;
import com.klef.jfsd.erp.service.CourseService;
import com.klef.jfsd.erp.service.FacultyService;
import com.klef.jfsd.erp.service.StudentService;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
@RestController
@RequestMapping("/admin")
@CrossOrigin
public class AdminController {

    @Autowired
    private StudentService studentService;
    
    @Autowired
    private FacultyService facultyService;
    
    @Autowired
    private AdminService adminService;
    
    @Autowired
    private CourseService courseService;
    

    @PostMapping("/addStudent")
    public ResponseEntity<String> addStudent(
            @RequestPart("student") Student student,
            @RequestPart("studentPhoto") MultipartFile studentPhoto) {

        // Save student photo (example: saving to file system)
        if (!studentPhoto.isEmpty()) {
            try {
                // Save photo to a specific location (e.g., file system or cloud storage)
                String photoPath = "/path/to/save/" + studentPhoto.getOriginalFilename();
                studentPhoto.transferTo(new File(photoPath));
                student.setPhoto(photoPath);  // Save the path of the photo in the Student entity
            } catch (IOException e) {
                e.printStackTrace();
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                                     .body("Error uploading photo");
            }
        }

        // Save student (excluding photo handling) to the database
        adminService.addStudent(student);

        return ResponseEntity.ok("Student added successfully");
    }

    @PostMapping("/addFaculty")
    public ResponseEntity<String> addFaculty(@RequestBody Faculty faculty) {
        adminService.addFaculty(faculty);
        return ResponseEntity.ok("Faculty added successfully");
    }
    
    // New endpoint to view all students
    @GetMapping("/viewAllStudents")
    public ResponseEntity<List<Student>> viewAllStudents() {
        List<Student> students = adminService.viewAllStudents();
        return ResponseEntity.ok(students);
    }

    // New endpoint to view all faculty
    @GetMapping("/viewAllFaculty")
    public ResponseEntity<List<Faculty>> viewAllFaculty() {
        List<Faculty> faculties = adminService.viewAllFaculty();
        return ResponseEntity.ok(faculties);
    }
    
    @GetMapping("/viewStudent/{id}")
    public ResponseEntity<Student> viewStudentById(@PathVariable Long id) {
        Student student = adminService.viewStudentById(id);
        return ResponseEntity.ok(student);
    }

    @GetMapping("/viewFaculty/{id}")
    public ResponseEntity<Faculty> viewFacultyById(@PathVariable Long id) {
        Faculty faculty = adminService.viewFacultyById(id);
        return ResponseEntity.ok(faculty);
    }
    
    
    @PostMapping("/addCourse")
    public ResponseEntity<String> addCourse(@RequestBody Course course) {
        courseService.addCourse(course);
        return ResponseEntity.ok("Course added successfully");
    }
    
    @PostMapping("/mapCourseToStudent")
    public ResponseEntity<String> mapCourseToStudent(@RequestBody CourseMappingDTO courseMappingDTO) {
        adminService.mapCourseToStudent(courseMappingDTO);
        return ResponseEntity.ok("Course mapped to student successfully");
    }
    
 // Mapping course to faculty using CourseMappingFac DTO
    @PostMapping("/mapCourseToFaculty")
    public ResponseEntity<String> mapCourseToFaculty(@RequestBody CourseMappingFac courseMappingFac) {
        adminService.mapCourseToFaculty(courseMappingFac.getFacultyId(), courseMappingFac.getCourseId());
        return ResponseEntity.ok("Course mapped to faculty successfully");
    }
    
    
    @PutMapping("/updateStudent")
    public ResponseEntity<String> updateStudent( @RequestBody Student updatedStudent) {
        adminService.updateStudent(updatedStudent);
        return ResponseEntity.ok("Student updated successfully");
    }
    
    @PutMapping("/updateFaculty")
    public ResponseEntity<String> updateFaculty(@RequestBody Faculty updatedFaculty) {
        adminService.updateFaculty(updatedFaculty);
        return ResponseEntity.ok("Faculty updated successfully");
    }
    
    
    @DeleteMapping("/delete-student/{id}")
    public ResponseEntity<String> deleteStudentById(@PathVariable Long id) {
        adminService.deleteStudentById(id);
        return ResponseEntity.ok("Student deleted successfully.");
    }
    
    
    @DeleteMapping("/delete-faculty/{id}")
    public ResponseEntity<String> deleteFacultyById(@PathVariable Long id) {
        adminService.deleteFacultyById(id);
        return ResponseEntity.ok("Faculty deleted successfully.");
    }
    
    @DeleteMapping("/delete-course/{id}")
    public ResponseEntity<String> deleteCourseById(@PathVariable Long id) {
        adminService.deleteCourseById(id);
        return ResponseEntity.ok("Course deleted successfully.");
    }
    
    ///login check
    
    @PostMapping("/checkadminLogin")
    public ResponseEntity<?> checkAdminLogin(@RequestBody LoginRequest request) {
        Admin admin = adminService.checkAdminLogin(request);
        if (admin != null) 
        {
            Map<String, String> response = new HashMap<>();
            response.put("message", "Login successful");
            response.put("role", "admin");  // Include the role
            return ResponseEntity.ok(response); // Return the response with role
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Invalid Login Details");
        }
    }


    
}
